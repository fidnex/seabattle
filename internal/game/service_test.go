package game

import (
	"reflect"
	"testing"

	"seabattle/internal/domain"
)

func TestService_shipIsDrowned(t *testing.T) {
	type args struct {
		field [10][10]int
		shoot *domain.Shoot
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			"вертикаль - в середину коробля",
			args{
				field: [10][10]int{
					{0, 3, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 3, 3, 3, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 1,
					Y: 1,
				},
			},
			false,
		},
		{
			"вертикаль - с одной стороны граница, с другой недобитая ячейка",
			args{
				field: [10][10]int{
					{0, 2, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 3, 3, 3, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 1,
					Y: 1,
				},
			},
			false,
		},
		{
			"вертикаль - корабль утоплен",
			args{
				field: [10][10]int{
					{0, 2, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 3, 3, 3, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 1,
					Y: 1,
				},
			},
			true,
		},
		{
			"горизонталь - в середину корабля",
			args{
				field: [10][10]int{
					{0, 2, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 3, 2, 3, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 3,
					Y: 6,
				},
			},
			false,
		},
		{
			"горизонталь - в край корабля",
			args{
				field: [10][10]int{
					{0, 2, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 2, 2, 3, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 3,
					Y: 5,
				},
			},
			false,
		},
		{
			"горизонталь - утопили",
			args{
				field: [10][10]int{
					{0, 2, 0, 3, 0, 3, 3, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 2, 2, 2, 0, 0},
					{0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
					{0, 0, 0, 3, 3, 3, 0, 0, 0, 0},
					{0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 3, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 3,
					Y: 7,
				},
			},
			true,
		},
		{
			"баговый кораблик",
			args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 1,
				},
			},
			true,
		},
		{
			"баговый кораблик 2",
			args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 2,
				},
			},
			true,
		},
		{
			"баговый кораблик 3",
			args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 3,
				},
			},
			true,
		},
		{
			"баговый кораблик 4",
			args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 1, 2, 0, 1, 0, 0},
					{0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 4,
					Y: 5,
				},
			},
			true,
		},
		{
			"баговый кораблик 5",
			args{
				field: [10][10]int{
					{2, 1, 1, 1, 1, 1, 1, 1, 2, 2},
					{2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{3, 0, 0, 0, 1, 2, 0, 1, 0, 0},
					{0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 0,
				},
			},
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &Service{}
			if got := s.shipIsDrowned(tt.args.field, tt.args.shoot); got != tt.want {
				t.Errorf("shipIsDrowned() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestService_drownShip(t *testing.T) {
	type args struct {
		field [10][10]int
		shoot *domain.Shoot
	}
	tests := []struct {
		name string
		args args
		want [10][10]int
	}{
		{
			name: "одиночный кораблик",
			args: args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 1,
				},
			},
			want: [10][10]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
		{
			name: "горизонательный четверной кораблик",
			args: args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 2, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 1,
				},
			},
			want: [10][10]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
				{1, 2, 2, 2, 2, 1, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
		{
			name: "вертикальный кораблик",
			args: args{
				field: [10][10]int{
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 1,
				},
			},
			want: [10][10]int{
				{1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
		{
			name: "сломался кораблик",
			args: args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 3,
				},
			},
			want: [10][10]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
				{1, 2, 2, 2, 1, 0, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
		{
			name: "сломался кораблик 2",
			args: args{
				field: [10][10]int{
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 2, 2, 2, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				},
				shoot: &domain.Shoot{
					X: 2,
					Y: 1,
				},
			},
			want: [10][10]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
				{1, 2, 2, 2, 1, 0, 0, 0, 0, 0},
				{1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &Service{}
			if got := s.drownShip(tt.args.field, tt.args.shoot); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("drownShip() = %v, want %v", got, tt.want)
			}
		})
	}
}
